# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:03:35+00:00

from __future__ import annotations

from typing import Dict, List, Optional, Union

from pydantic import BaseModel, EmailStr, Field


class Identification(BaseModel):
    accountId: Optional[str] = Field(
        None, description='Unique identifier for the account in your database'
    )
    domain: Optional[str] = Field(
        None, description='The domain associated with the account (e.g. acme-inc.com)'
    )


class AccountsDeleteRequest(BaseModel):
    identification: Identification = Field(
        ..., description='Account identification requires an accountId, domain or both'
    )


class Meta(BaseModel):
    requestId: str
    status: float


class AccountsDeleteResponse(BaseModel):
    meta: Meta
    message: str


class Parameters(BaseModel):
    header: Optional[Dict[str, str]] = None
    path: Optional[Dict[str, str]] = None
    query: Optional[Dict[str, str]] = None


class Errors(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class AccountsDeleteResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class AccountsDeleteResponse2(BaseModel):
    meta: Meta
    message: str


class AccountsDeleteResponse3(BaseModel):
    meta: Meta
    message: str


class AccountsDeleteResponse4(BaseModel):
    meta: Meta
    message: str


class AccountsDeleteResponse5(BaseModel):
    meta: Meta
    message: str


class AccountsUpsertPostRequest(BaseModel):
    identification: Identification = Field(
        ..., description='Account identification requires an accountId, domain or both'
    )
    properties: Optional[Dict[str, Union[str, bool, float, List[str]]]] = Field(
        None,
        description='The properties being set, possible values are strings, booleans, numbers and datetimes (ISO 8601)',
    )


class AccountsUpsertPostResponse(BaseModel):
    meta: Meta
    message: str = Field(..., examples=['Account will be created or updated'])
    rejected: Optional[Dict[str, str]] = Field(
        None,
        description='If validation fails, specifies the property name and error message',
        examples=[{'created_at': 'Expected a date but found a boolean.'}],
    )


class Errors1(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class AccountsUpsertPostResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors1 = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class AccountsUpsertPostResponse2(BaseModel):
    meta: Meta
    message: str


class AccountsUpsertPostResponse3(BaseModel):
    meta: Meta
    message: str


class AccountsUpsertPostResponse4(BaseModel):
    meta: Meta
    message: str


class AccountsUpsertPostResponse5(BaseModel):
    meta: Meta
    message: str


class Account(BaseModel):
    accountId: Optional[str] = Field(
        None, description='Unique identifier for the account in your database'
    )
    domain: Optional[str] = Field(
        None, description='The domain associated with the account (e.g. acme-inc.com)'
    )


class Identification2(BaseModel):
    email: Optional[EmailStr] = Field(None, description='Email address of the user')
    userId: Optional[str] = Field(
        None, description='Unique identifier for the user in your database'
    )


class User(BaseModel):
    identification: Identification2 = Field(
        ..., description='User identification requires a userId, email or both'
    )


class AccountsUsersAddPostRequest(BaseModel):
    account: Account = Field(
        ..., description='Account identification requires an accountId, domain or both'
    )
    users: List[User]


class AccountsUsersAddPostResponse(BaseModel):
    meta: Meta
    message: str


class Errors2(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class AccountsUsersAddPostResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors2 = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class AccountsUsersAddPostResponse2(BaseModel):
    meta: Meta
    message: str


class AccountsUsersAddPostResponse3(BaseModel):
    meta: Meta
    message: str


class AccountsUsersAddPostResponse4(BaseModel):
    meta: Meta
    message: str


class User1(BaseModel):
    identification: Identification2 = Field(
        ..., description='User identification requires a userId, email or both'
    )


class AccountsUsersRemovePostRequest(BaseModel):
    account: Account = Field(
        ..., description='Account identification requires an accountId, domain or both'
    )
    users: List[User1]


class AccountsUsersRemovePostResponse(BaseModel):
    meta: Meta
    message: str


class Errors3(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class AccountsUsersRemovePostResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors3 = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class AccountsUsersRemovePostResponse2(BaseModel):
    meta: Meta
    message: str


class AccountsUsersRemovePostResponse3(BaseModel):
    meta: Meta
    message: str


class AccountsUsersRemovePostResponse4(BaseModel):
    meta: Meta
    message: str


class Group(BaseModel):
    id: str
    name: str


class Datum(BaseModel):
    group: Optional[Group] = Field(None, description='Event group details')
    id: str
    name: str


class EventsGetResponse(BaseModel):
    meta: Meta
    data: List[Datum]


class Errors4(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class EventsGetResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors4 = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class EventsGetResponse2(BaseModel):
    meta: Meta
    message: str


class EventsGetResponse3(BaseModel):
    meta: Meta
    message: str


class EventsGetResponse4(BaseModel):
    meta: Meta
    message: str


class EventsGetResponse5(BaseModel):
    meta: Meta
    message: str


class User2(BaseModel):
    email: Optional[EmailStr] = Field(None, description='Email address of the user')
    userId: Optional[str] = Field(
        None, description='Unique identifier for the user in your database'
    )


class Identification4(BaseModel):
    account: Optional[Account] = Field(
        None, description='Account identification requires an accountId, domain or both'
    )
    user: Optional[User2] = Field(
        None, description='User identification requires a userId, email or both'
    )


class EventsPostRequest(BaseModel):
    identification: Identification4 = Field(
        ..., description='Event identification requires a user, account or both'
    )
    metadata: Optional[Dict[str, Union[str, bool, float]]] = Field(
        None,
        description='Event metadata, possible values are strings, booleans, numbers and datetimes (ISO 8601)',
    )
    name: str
    triggeredAt: Optional[str] = Field(
        None, description='If left blank this defaults to the current datetime'
    )


class EventsPostResponse(BaseModel):
    meta: Meta
    message: str


class Errors5(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class EventsPostResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors5 = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class EventsPostResponse2(BaseModel):
    meta: Meta
    message: str


class EventsPostResponse3(BaseModel):
    meta: Meta
    message: str


class EventsPostResponse4(BaseModel):
    meta: Meta
    message: str


class EventsPostResponse5(BaseModel):
    meta: Meta
    message: str


class Identification5(BaseModel):
    email: Optional[EmailStr] = Field(None, description='Email address of the user')
    userId: Optional[str] = Field(
        None, description='Unique identifier for the user in your database'
    )


class LinkPostRequest(BaseModel):
    deviceId: str
    identification: Identification5 = Field(
        ..., description='User identification requires a userId, email or both'
    )


class LinkPostResponse(BaseModel):
    meta: Meta
    message: str


class Errors6(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class LinkPostResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors6 = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class LinkPostResponse2(BaseModel):
    meta: Meta
    message: str


class LinkPostResponse3(BaseModel):
    meta: Meta
    message: str


class LinkPostResponse4(BaseModel):
    meta: Meta
    message: str


class LinkPostResponse5(BaseModel):
    meta: Meta
    message: str


class Datum1(BaseModel):
    group: Optional[Group] = Field(None, description='Property group details')
    isComputed: bool
    label: str
    name: str


class PropertiesAccountsGetResponse(BaseModel):
    meta: Meta
    data: List[Datum1]


class Errors7(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class PropertiesAccountsGetResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors7 = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class PropertiesAccountsGetResponse2(BaseModel):
    meta: Meta
    message: str


class PropertiesAccountsGetResponse3(BaseModel):
    meta: Meta
    message: str


class PropertiesAccountsGetResponse4(BaseModel):
    meta: Meta
    message: str


class PropertiesAccountsGetResponse5(BaseModel):
    meta: Meta
    message: str


class Datum2(BaseModel):
    group: Optional[Group] = Field(None, description='Property group details')
    isComputed: bool
    label: str
    name: str


class PropertiesUsersGetResponse(BaseModel):
    meta: Meta
    data: List[Datum2]


class Errors8(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class PropertiesUsersGetResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors8 = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class PropertiesUsersGetResponse2(BaseModel):
    meta: Meta
    message: str


class PropertiesUsersGetResponse3(BaseModel):
    meta: Meta
    message: str


class PropertiesUsersGetResponse4(BaseModel):
    meta: Meta
    message: str


class PropertiesUsersGetResponse5(BaseModel):
    meta: Meta
    message: str


class Datum3(BaseModel):
    id: str
    name: str


class SegmentsAccountsGetResponse(BaseModel):
    meta: Meta
    data: List[Datum3]


class Errors9(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class SegmentsAccountsGetResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors9 = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class SegmentsAccountsGetResponse2(BaseModel):
    meta: Meta
    message: str


class SegmentsAccountsGetResponse3(BaseModel):
    meta: Meta
    message: str


class SegmentsAccountsGetResponse4(BaseModel):
    meta: Meta
    message: str


class SegmentsAccountsGetResponse5(BaseModel):
    meta: Meta
    message: str


class SegmentsUsersGetResponse(BaseModel):
    meta: Meta
    data: List[Datum3]


class Errors10(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class SegmentsUsersGetResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors10 = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class SegmentsUsersGetResponse2(BaseModel):
    meta: Meta
    message: str


class SegmentsUsersGetResponse3(BaseModel):
    meta: Meta
    message: str


class SegmentsUsersGetResponse4(BaseModel):
    meta: Meta
    message: str


class SegmentsUsersGetResponse5(BaseModel):
    meta: Meta
    message: str


class Identification6(BaseModel):
    account: Optional[Account] = Field(
        None, description='Account identification requires an accountId, domain or both'
    )
    user: Optional[User2] = Field(
        None, description='User identification requires a userId, email or both'
    )


class TrackPostRequest(BaseModel):
    identification: Identification6 = Field(
        ..., description='Event identification requires a user, account or both'
    )
    metadata: Optional[Dict[str, Union[str, bool, float]]] = Field(
        None,
        description='Event metadata, possible values are strings, booleans, numbers and datetimes (ISO 8601)',
    )
    name: str
    triggeredAt: Optional[str] = Field(
        None, description='If left blank this defaults to the current datetime'
    )


class TrackPostResponse(BaseModel):
    meta: Meta
    message: str


class Errors11(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class TrackPostResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors11 = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class TrackPostResponse2(BaseModel):
    meta: Meta
    message: str


class TrackPostResponse3(BaseModel):
    meta: Meta
    message: str


class TrackPostResponse4(BaseModel):
    meta: Meta
    message: str


class TrackPostResponse5(BaseModel):
    meta: Meta
    message: str


class Data(BaseModel):
    domain: str
    snippet: str


class TrackingSnippetGetResponse(BaseModel):
    meta: Meta
    data: Data = Field(..., description='A snippet')


class Errors12(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class TrackingSnippetGetResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors12 = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class TrackingSnippetGetResponse2(BaseModel):
    meta: Meta
    message: str


class TrackingSnippetGetResponse3(BaseModel):
    meta: Meta
    message: str


class TrackingSnippetGetResponse4(BaseModel):
    meta: Meta
    message: str


class TrackingSnippetGetResponse5(BaseModel):
    meta: Meta
    message: str


class TrackingSnippetGetResponse6(BaseModel):
    meta: Meta
    message: str


class Identification7(BaseModel):
    email: Optional[EmailStr] = Field(None, description='Email address of the user')
    userId: Optional[str] = Field(
        None, description='Unique identifier for the user in your database'
    )


class UsersDeleteRequest(BaseModel):
    identification: Identification7 = Field(
        ..., description='User identification requires a userId, email or both'
    )


class UsersDeleteResponse(BaseModel):
    meta: Meta
    message: str


class Errors13(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class UsersDeleteResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors13 = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class UsersDeleteResponse2(BaseModel):
    meta: Meta
    message: str


class UsersDeleteResponse3(BaseModel):
    meta: Meta
    message: str


class UsersDeleteResponse4(BaseModel):
    meta: Meta
    message: str


class UsersDeleteResponse5(BaseModel):
    meta: Meta
    message: str


class UsersUpsertPostRequest(BaseModel):
    identification: Identification7 = Field(
        ..., description='User identification requires a userId, email or both'
    )
    properties: Optional[Dict[str, Union[str, bool, float, List[str]]]] = Field(
        None,
        description='The properties being set, possible values are strings, booleans, numbers and datetimes (ISO 8601)',
    )


class UsersUpsertPostResponse(BaseModel):
    meta: Meta
    message: str = Field(..., examples=['User will be created or updated'])
    rejected: Optional[Dict[str, str]] = Field(
        None,
        description='If validation fails, specifies property name and error description',
        examples=[{'created_at': 'Expected a date but found a boolean.'}],
    )


class Errors14(BaseModel):
    fields: Optional[Dict[str, str]] = Field(
        None, description='All input fields that seemed incorrect'
    )
    parameters: Optional[Parameters] = Field(
        None,
        description='All query-, header- and path- parameters that seemed incorrect',
    )


class UsersUpsertPostResponse1(BaseModel):
    meta: Meta
    message: str
    errors: Errors14 = Field(
        ..., description='Map that sums up all received values that seemed incorrect'
    )


class UsersUpsertPostResponse2(BaseModel):
    meta: Meta
    message: str


class UsersUpsertPostResponse3(BaseModel):
    meta: Meta
    message: str


class UsersUpsertPostResponse4(BaseModel):
    meta: Meta
    message: str


class UsersUpsertPostResponse5(BaseModel):
    meta: Meta
    message: str


class Data1(BaseModel):
    permissions: List[str]


class ValidateGetResponse(BaseModel):
    meta: Meta
    data: Data1 = Field(..., description='Validation of API Key')


class ValidateGetResponse1(BaseModel):
    meta: Meta
    message: str


class ValidateGetResponse2(BaseModel):
    meta: Meta
    message: str


class ValidateGetResponse3(BaseModel):
    meta: Meta
    message: str


class ValidateGetResponse4(BaseModel):
    meta: Meta
    message: str
